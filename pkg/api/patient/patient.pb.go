// Code generated by protoc-gen-go. DO NOT EDIT.
// source: patient.proto

package patient

import (
	context "context"
	fmt "fmt"
	. "github.com/gidyon/umrs/pkg/api/ledger"
	"github.com/gidyon/umrs/pkg/api/treatment"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// State is patient state at a given time
type State int32

const (
	State_UNKNOWN State = 0
	State_ALIVE   State = 1
	State_DEAD    State = 2
)

var State_name = map[int32]string{
	0: "UNKNOWN",
	1: "ALIVE",
	2: "DEAD",
}

var State_value = map[string]int32{
	"UNKNOWN": 0,
	"ALIVE":   1,
	"DEAD":    2,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_88fb8dc00e3f1504, []int{0}
}

type Details struct {
	Details              map[string]string `protobuf:"bytes,5,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Details) Reset()         { *m = Details{} }
func (m *Details) String() string { return proto.CompactTextString(m) }
func (*Details) ProtoMessage()    {}
func (*Details) Descriptor() ([]byte, []int) {
	return fileDescriptor_88fb8dc00e3f1504, []int{0}
}

func (m *Details) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Details.Unmarshal(m, b)
}
func (m *Details) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Details.Marshal(b, m, deterministic)
}
func (m *Details) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Details.Merge(m, src)
}
func (m *Details) XXX_Size() int {
	return xxx_messageInfo_Details.Size(m)
}
func (m *Details) XXX_DiscardUnknown() {
	xxx_messageInfo_Details.DiscardUnknown(m)
}

var xxx_messageInfo_Details proto.InternalMessageInfo

func (m *Details) GetDetails() map[string]string {
	if m != nil {
		return m.Details
	}
	return nil
}

// MedicalData contains medical information for a patient
type MedicalData struct {
	HospitalId           string   `protobuf:"bytes,1,opt,name=hospital_id,json=hospitalId,proto3" json:"hospital_id,omitempty"`
	HospitalName         string   `protobuf:"bytes,2,opt,name=hospital_name,json=hospitalName,proto3" json:"hospital_name,omitempty"`
	PatientName          string   `protobuf:"bytes,3,opt,name=patient_name,json=patientName,proto3" json:"patient_name,omitempty"`
	PatientState         State    `protobuf:"varint,4,opt,name=patient_state,json=patientState,proto3,enum=umrs.patient.State" json:"patient_state,omitempty"`
	Details              *Details `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MedicalData) Reset()         { *m = MedicalData{} }
func (m *MedicalData) String() string { return proto.CompactTextString(m) }
func (*MedicalData) ProtoMessage()    {}
func (*MedicalData) Descriptor() ([]byte, []int) {
	return fileDescriptor_88fb8dc00e3f1504, []int{1}
}

func (m *MedicalData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MedicalData.Unmarshal(m, b)
}
func (m *MedicalData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MedicalData.Marshal(b, m, deterministic)
}
func (m *MedicalData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedicalData.Merge(m, src)
}
func (m *MedicalData) XXX_Size() int {
	return xxx_messageInfo_MedicalData.Size(m)
}
func (m *MedicalData) XXX_DiscardUnknown() {
	xxx_messageInfo_MedicalData.DiscardUnknown(m)
}

var xxx_messageInfo_MedicalData proto.InternalMessageInfo

func (m *MedicalData) GetHospitalId() string {
	if m != nil {
		return m.HospitalId
	}
	return ""
}

func (m *MedicalData) GetHospitalName() string {
	if m != nil {
		return m.HospitalName
	}
	return ""
}

func (m *MedicalData) GetPatientName() string {
	if m != nil {
		return m.PatientName
	}
	return ""
}

func (m *MedicalData) GetPatientState() State {
	if m != nil {
		return m.PatientState
	}
	return State_UNKNOWN
}

func (m *MedicalData) GetDetails() *Details {
	if m != nil {
		return m.Details
	}
	return nil
}

// HashResponse is response for operations that add items to the ledger
type HashResponse struct {
	OperationHash        string   `protobuf:"bytes,1,opt,name=operation_hash,json=operationHash,proto3" json:"operation_hash,omitempty"`
	PatientId            string   `protobuf:"bytes,2,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HashResponse) Reset()         { *m = HashResponse{} }
func (m *HashResponse) String() string { return proto.CompactTextString(m) }
func (*HashResponse) ProtoMessage()    {}
func (*HashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88fb8dc00e3f1504, []int{2}
}

func (m *HashResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HashResponse.Unmarshal(m, b)
}
func (m *HashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HashResponse.Marshal(b, m, deterministic)
}
func (m *HashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashResponse.Merge(m, src)
}
func (m *HashResponse) XXX_Size() int {
	return xxx_messageInfo_HashResponse.Size(m)
}
func (m *HashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HashResponse proto.InternalMessageInfo

func (m *HashResponse) GetOperationHash() string {
	if m != nil {
		return m.OperationHash
	}
	return ""
}

func (m *HashResponse) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

// OperationPayload contains payload for other operation
type OperationPayload struct {
	Details              *Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperationPayload) Reset()         { *m = OperationPayload{} }
func (m *OperationPayload) String() string { return proto.CompactTextString(m) }
func (*OperationPayload) ProtoMessage()    {}
func (*OperationPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_88fb8dc00e3f1504, []int{3}
}

func (m *OperationPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperationPayload.Unmarshal(m, b)
}
func (m *OperationPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperationPayload.Marshal(b, m, deterministic)
}
func (m *OperationPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationPayload.Merge(m, src)
}
func (m *OperationPayload) XXX_Size() int {
	return xxx_messageInfo_OperationPayload.Size(m)
}
func (m *OperationPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationPayload.DiscardUnknown(m)
}

var xxx_messageInfo_OperationPayload proto.InternalMessageInfo

func (m *OperationPayload) GetDetails() *Details {
	if m != nil {
		return m.Details
	}
	return nil
}

// MedicalActivity contains history of a patient
type MedicalActivity struct {
	BlockHash    string        `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Date         string        `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Timestamp    int64         `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Operation    Operation     `protobuf:"varint,4,opt,name=operation,proto3,enum=umrs.ledger.Operation" json:"operation,omitempty"`
	Patient      *ActorPayload `protobuf:"bytes,5,opt,name=patient,proto3" json:"patient,omitempty"`
	Creator      *ActorPayload `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	Organization *ActorPayload `protobuf:"bytes,7,opt,name=organization,proto3" json:"organization,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*MedicalActivity_MedicalData
	//	*MedicalActivity_Treatment
	//	*MedicalActivity_OperationPayload
	Payload              isMedicalActivity_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *MedicalActivity) Reset()         { *m = MedicalActivity{} }
func (m *MedicalActivity) String() string { return proto.CompactTextString(m) }
func (*MedicalActivity) ProtoMessage()    {}
func (*MedicalActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_88fb8dc00e3f1504, []int{4}
}

func (m *MedicalActivity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MedicalActivity.Unmarshal(m, b)
}
func (m *MedicalActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MedicalActivity.Marshal(b, m, deterministic)
}
func (m *MedicalActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedicalActivity.Merge(m, src)
}
func (m *MedicalActivity) XXX_Size() int {
	return xxx_messageInfo_MedicalActivity.Size(m)
}
func (m *MedicalActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_MedicalActivity.DiscardUnknown(m)
}

var xxx_messageInfo_MedicalActivity proto.InternalMessageInfo

func (m *MedicalActivity) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *MedicalActivity) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *MedicalActivity) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MedicalActivity) GetOperation() Operation {
	if m != nil {
		return m.Operation
	}
	return Operation_UKNOWN
}

func (m *MedicalActivity) GetPatient() *ActorPayload {
	if m != nil {
		return m.Patient
	}
	return nil
}

func (m *MedicalActivity) GetCreator() *ActorPayload {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *MedicalActivity) GetOrganization() *ActorPayload {
	if m != nil {
		return m.Organization
	}
	return nil
}

type isMedicalActivity_Payload interface {
	isMedicalActivity_Payload()
}

type MedicalActivity_MedicalData struct {
	MedicalData *MedicalData `protobuf:"bytes,8,opt,name=medical_data,json=medicalData,proto3,oneof"`
}

type MedicalActivity_Treatment struct {
	Treatment *treatment.TreatmentData `protobuf:"bytes,9,opt,name=treatment,proto3,oneof"`
}

type MedicalActivity_OperationPayload struct {
	OperationPayload *OperationPayload `protobuf:"bytes,10,opt,name=operation_payload,json=operationPayload,proto3,oneof"`
}

func (*MedicalActivity_MedicalData) isMedicalActivity_Payload() {}

func (*MedicalActivity_Treatment) isMedicalActivity_Payload() {}

func (*MedicalActivity_OperationPayload) isMedicalActivity_Payload() {}

func (m *MedicalActivity) GetPayload() isMedicalActivity_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *MedicalActivity) GetMedicalData() *MedicalData {
	if x, ok := m.GetPayload().(*MedicalActivity_MedicalData); ok {
		return x.MedicalData
	}
	return nil
}

func (m *MedicalActivity) GetTreatment() *treatment.TreatmentData {
	if x, ok := m.GetPayload().(*MedicalActivity_Treatment); ok {
		return x.Treatment
	}
	return nil
}

func (m *MedicalActivity) GetOperationPayload() *OperationPayload {
	if x, ok := m.GetPayload().(*MedicalActivity_OperationPayload); ok {
		return x.OperationPayload
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MedicalActivity) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MedicalActivity_MedicalData)(nil),
		(*MedicalActivity_Treatment)(nil),
		(*MedicalActivity_OperationPayload)(nil),
	}
}

// MedicalHistory is a collection of patient medical history
type MedicalHistory struct {
	History              []*MedicalActivity `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
	NextPageNumber       int32              `protobuf:"varint,2,opt,name=next_page_number,json=nextPageNumber,proto3" json:"next_page_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MedicalHistory) Reset()         { *m = MedicalHistory{} }
func (m *MedicalHistory) String() string { return proto.CompactTextString(m) }
func (*MedicalHistory) ProtoMessage()    {}
func (*MedicalHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_88fb8dc00e3f1504, []int{5}
}

func (m *MedicalHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MedicalHistory.Unmarshal(m, b)
}
func (m *MedicalHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MedicalHistory.Marshal(b, m, deterministic)
}
func (m *MedicalHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedicalHistory.Merge(m, src)
}
func (m *MedicalHistory) XXX_Size() int {
	return xxx_messageInfo_MedicalHistory.Size(m)
}
func (m *MedicalHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_MedicalHistory.DiscardUnknown(m)
}

var xxx_messageInfo_MedicalHistory proto.InternalMessageInfo

func (m *MedicalHistory) GetHistory() []*MedicalActivity {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *MedicalHistory) GetNextPageNumber() int32 {
	if m != nil {
		return m.NextPageNumber
	}
	return 0
}

// AddPatientMedDataRequest is request to add patient medical data to database and ledger
type AddPatientMedDataRequest struct {
	PatientId            string        `protobuf:"bytes,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	MedicalData          *MedicalData  `protobuf:"bytes,2,opt,name=medical_data,json=medicalData,proto3" json:"medical_data,omitempty"`
	Actor                *ActorPayload `protobuf:"bytes,3,opt,name=actor,proto3" json:"actor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AddPatientMedDataRequest) Reset()         { *m = AddPatientMedDataRequest{} }
func (m *AddPatientMedDataRequest) String() string { return proto.CompactTextString(m) }
func (*AddPatientMedDataRequest) ProtoMessage()    {}
func (*AddPatientMedDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88fb8dc00e3f1504, []int{6}
}

func (m *AddPatientMedDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPatientMedDataRequest.Unmarshal(m, b)
}
func (m *AddPatientMedDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPatientMedDataRequest.Marshal(b, m, deterministic)
}
func (m *AddPatientMedDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPatientMedDataRequest.Merge(m, src)
}
func (m *AddPatientMedDataRequest) XXX_Size() int {
	return xxx_messageInfo_AddPatientMedDataRequest.Size(m)
}
func (m *AddPatientMedDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPatientMedDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPatientMedDataRequest proto.InternalMessageInfo

func (m *AddPatientMedDataRequest) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *AddPatientMedDataRequest) GetMedicalData() *MedicalData {
	if m != nil {
		return m.MedicalData
	}
	return nil
}

func (m *AddPatientMedDataRequest) GetActor() *ActorPayload {
	if m != nil {
		return m.Actor
	}
	return nil
}

// GetPatientMedDataRequest is request to retrieve a single medical data
type GetPatientMedDataRequest struct {
	PatientId            string   `protobuf:"bytes,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	IsOwner              bool     `protobuf:"varint,2,opt,name=is_owner,json=isOwner,proto3" json:"is_owner,omitempty"`
	AccessToken          string   `protobuf:"bytes,3,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPatientMedDataRequest) Reset()         { *m = GetPatientMedDataRequest{} }
func (m *GetPatientMedDataRequest) String() string { return proto.CompactTextString(m) }
func (*GetPatientMedDataRequest) ProtoMessage()    {}
func (*GetPatientMedDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88fb8dc00e3f1504, []int{7}
}

func (m *GetPatientMedDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPatientMedDataRequest.Unmarshal(m, b)
}
func (m *GetPatientMedDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPatientMedDataRequest.Marshal(b, m, deterministic)
}
func (m *GetPatientMedDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPatientMedDataRequest.Merge(m, src)
}
func (m *GetPatientMedDataRequest) XXX_Size() int {
	return xxx_messageInfo_GetPatientMedDataRequest.Size(m)
}
func (m *GetPatientMedDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPatientMedDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPatientMedDataRequest proto.InternalMessageInfo

func (m *GetPatientMedDataRequest) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *GetPatientMedDataRequest) GetIsOwner() bool {
	if m != nil {
		return m.IsOwner
	}
	return false
}

func (m *GetPatientMedDataRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

// GetMedicalHistoryRequest is request to get medical history of a patient
type GetMedicalHistoryRequest struct {
	PatientId            string   `protobuf:"bytes,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	PageNumber           int32    `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize             int32    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Filter               *Filter  `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	IsOwner              bool     `protobuf:"varint,5,opt,name=is_owner,json=isOwner,proto3" json:"is_owner,omitempty"`
	AccessToken          string   `protobuf:"bytes,6,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMedicalHistoryRequest) Reset()         { *m = GetMedicalHistoryRequest{} }
func (m *GetMedicalHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*GetMedicalHistoryRequest) ProtoMessage()    {}
func (*GetMedicalHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88fb8dc00e3f1504, []int{8}
}

func (m *GetMedicalHistoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMedicalHistoryRequest.Unmarshal(m, b)
}
func (m *GetMedicalHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMedicalHistoryRequest.Marshal(b, m, deterministic)
}
func (m *GetMedicalHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMedicalHistoryRequest.Merge(m, src)
}
func (m *GetMedicalHistoryRequest) XXX_Size() int {
	return xxx_messageInfo_GetMedicalHistoryRequest.Size(m)
}
func (m *GetMedicalHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMedicalHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMedicalHistoryRequest proto.InternalMessageInfo

func (m *GetMedicalHistoryRequest) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *GetMedicalHistoryRequest) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *GetMedicalHistoryRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *GetMedicalHistoryRequest) GetFilter() *Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *GetMedicalHistoryRequest) GetIsOwner() bool {
	if m != nil {
		return m.IsOwner
	}
	return false
}

func (m *GetMedicalHistoryRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func init() {
	proto.RegisterEnum("umrs.patient.State", State_name, State_value)
	proto.RegisterType((*Details)(nil), "umrs.patient.Details")
	proto.RegisterMapType((map[string]string)(nil), "umrs.patient.Details.DetailsEntry")
	proto.RegisterType((*MedicalData)(nil), "umrs.patient.MedicalData")
	proto.RegisterType((*HashResponse)(nil), "umrs.patient.HashResponse")
	proto.RegisterType((*OperationPayload)(nil), "umrs.patient.OperationPayload")
	proto.RegisterType((*MedicalActivity)(nil), "umrs.patient.MedicalActivity")
	proto.RegisterType((*MedicalHistory)(nil), "umrs.patient.MedicalHistory")
	proto.RegisterType((*AddPatientMedDataRequest)(nil), "umrs.patient.AddPatientMedDataRequest")
	proto.RegisterType((*GetPatientMedDataRequest)(nil), "umrs.patient.GetPatientMedDataRequest")
	proto.RegisterType((*GetMedicalHistoryRequest)(nil), "umrs.patient.GetMedicalHistoryRequest")
}

func init() { proto.RegisterFile("patient.proto", fileDescriptor_88fb8dc00e3f1504) }

var fileDescriptor_88fb8dc00e3f1504 = []byte{
	// 957 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xd1, 0x6e, 0xe3, 0x44,
	0x17, 0xae, 0xd3, 0xa4, 0x89, 0x4f, 0xd2, 0x6e, 0x3a, 0xff, 0xfe, 0xc2, 0x6b, 0x5a, 0xb6, 0x18,
	0x01, 0xd9, 0x85, 0x36, 0x28, 0x95, 0xa0, 0xaa, 0x16, 0xa4, 0x2c, 0x2d, 0xb4, 0x82, 0xa6, 0x95,
	0xb7, 0x0b, 0x12, 0x37, 0xd1, 0xd4, 0x9e, 0x4d, 0x46, 0x8d, 0x3d, 0xc6, 0x33, 0xdd, 0x92, 0x22,
	0x6e, 0xe0, 0x0e, 0x2e, 0x90, 0xe0, 0x2d, 0x10, 0xcf, 0xc2, 0x0d, 0x4f, 0x80, 0x84, 0x78, 0x0e,
	0x34, 0xe3, 0xb1, 0x63, 0x27, 0x29, 0xed, 0x22, 0x71, 0x95, 0xf1, 0xe7, 0x6f, 0x66, 0xbe, 0x73,
	0xce, 0x77, 0x8e, 0x03, 0xcb, 0x11, 0x16, 0x94, 0x84, 0x62, 0x2b, 0x8a, 0x99, 0x60, 0xa8, 0x11,
	0x78, 0xcf, 0xa2, 0x2d, 0x8d, 0xd9, 0x6b, 0x03, 0xc6, 0x06, 0x23, 0xd2, 0xc6, 0x11, 0x6d, 0xe3,
	0x30, 0x64, 0x02, 0x0b, 0xca, 0x42, 0x9e, 0x70, 0xed, 0xb7, 0xd5, 0x8f, 0xb7, 0x39, 0x20, 0xe1,
	0x26, 0xbf, 0xc4, 0x83, 0x01, 0x89, 0xdb, 0x2c, 0x52, 0x8c, 0x39, 0xec, 0xe6, 0xd9, 0x88, 0x79,
	0xe7, 0xde, 0x10, 0xd3, 0x50, 0x23, 0x77, 0x44, 0x4c, 0xb0, 0x08, 0xb2, 0xcb, 0x9d, 0xef, 0x0c,
	0xa8, 0xee, 0x11, 0x81, 0xe9, 0x88, 0xa3, 0x47, 0x50, 0xf5, 0x93, 0xa5, 0x55, 0xd9, 0x58, 0x6c,
	0xd5, 0x3b, 0xce, 0x56, 0x5e, 0xda, 0x96, 0xe6, 0xa5, 0xbf, 0xfb, 0xa1, 0x88, 0xc7, 0x6e, 0xba,
	0xc5, 0xde, 0x85, 0x46, 0xfe, 0x05, 0x6a, 0xc2, 0xe2, 0x39, 0x19, 0x5b, 0xc6, 0x86, 0xd1, 0x32,
	0x5d, 0xb9, 0x44, 0x77, 0xa1, 0xf2, 0x1c, 0x8f, 0x2e, 0x88, 0x55, 0x52, 0x58, 0xf2, 0xb0, 0x5b,
	0xda, 0x31, 0x9c, 0x3f, 0x0c, 0xa8, 0x1f, 0x11, 0x9f, 0x7a, 0x78, 0xb4, 0x87, 0x05, 0x46, 0xf7,
	0xa1, 0x3e, 0x64, 0x3c, 0xa2, 0x02, 0x8f, 0xfa, 0xd4, 0xd7, 0x67, 0x40, 0x0a, 0x1d, 0xfa, 0xe8,
	0x35, 0x58, 0xce, 0x08, 0x21, 0x0e, 0xd2, 0x23, 0x1b, 0x29, 0xd8, 0xc3, 0x01, 0x41, 0xaf, 0x42,
	0x43, 0x4b, 0x4f, 0x38, 0x8b, 0x8a, 0x53, 0xd7, 0x98, 0xa2, 0xec, 0x64, 0xc5, 0xe8, 0x73, 0x81,
	0x05, 0xb1, 0xca, 0x1b, 0x46, 0x6b, 0xa5, 0xf3, 0xbf, 0x62, 0xe0, 0x4f, 0xe4, 0x2b, 0x37, 0x3d,
	0x4c, 0x3d, 0xa1, 0x76, 0x3e, 0x59, 0x46, 0xab, 0xde, 0xf9, 0xff, 0xdc, 0x64, 0x65, 0xf9, 0x71,
	0x4e, 0xa1, 0x71, 0x80, 0xf9, 0xd0, 0x25, 0x3c, 0x62, 0x21, 0x27, 0xe8, 0x75, 0x58, 0x61, 0x11,
	0x89, 0x55, 0xc1, 0xfa, 0x43, 0xcc, 0x87, 0x3a, 0xcc, 0xe5, 0x0c, 0x95, 0x74, 0xb4, 0x0e, 0x90,
	0x2a, 0xa4, 0xbe, 0x0e, 0xd3, 0xd4, 0xc8, 0xa1, 0xef, 0x7c, 0x08, 0xcd, 0xe3, 0x94, 0x7f, 0x82,
	0xc7, 0x23, 0x86, 0xfd, 0xbc, 0x34, 0xe3, 0x56, 0xd2, 0x7e, 0x29, 0xc3, 0x1d, 0x9d, 0xfe, 0xae,
	0x27, 0xe8, 0x73, 0x2a, 0xc6, 0xf2, 0x5e, 0xe5, 0x9e, 0xbc, 0x34, 0x53, 0x21, 0x4a, 0x16, 0x82,
	0xb2, 0x2f, 0xf3, 0x95, 0x08, 0x52, 0x6b, 0xb4, 0x06, 0xa6, 0xa0, 0x01, 0xe1, 0x02, 0x07, 0x91,
	0x4a, 0xf6, 0xa2, 0x3b, 0x01, 0xd0, 0x0e, 0x98, 0x59, 0x64, 0x3a, 0xcd, 0x76, 0xa2, 0x2b, 0xe7,
	0xd2, 0x2c, 0x16, 0x77, 0x42, 0x46, 0xef, 0x41, 0x55, 0x4b, 0xd7, 0xa9, 0x5e, 0x9f, 0xd9, 0xd7,
	0xf5, 0x04, 0x8b, 0x75, 0xfc, 0x6e, 0xca, 0x96, 0x1b, 0x3d, 0xe9, 0x77, 0x16, 0x5b, 0x4b, 0xb7,
	0xda, 0xa8, 0xd9, 0xa8, 0x0b, 0x0d, 0x16, 0x0f, 0x70, 0x48, 0xaf, 0x12, 0xb9, 0xd5, 0xdb, 0xec,
	0x2e, 0x6c, 0x41, 0x1f, 0x40, 0x23, 0x48, 0x52, 0xda, 0xf7, 0xb1, 0xc0, 0x56, 0x4d, 0x1d, 0x71,
	0xaf, 0x58, 0x89, 0x9c, 0xe7, 0x0f, 0x16, 0xdc, 0x7a, 0x90, 0x6b, 0x81, 0xf7, 0xc1, 0xcc, 0x7a,
	0xd5, 0x32, 0xf3, 0xf7, 0x4f, 0x5a, 0xf8, 0x34, 0x5d, 0xe9, 0x03, 0x26, 0x3b, 0xd0, 0x11, 0xac,
	0x4e, 0xdc, 0x15, 0x25, 0x0a, 0x2d, 0x50, 0xc7, 0xbc, 0x52, 0xd4, 0x30, 0x6d, 0x9f, 0x83, 0x05,
	0xb7, 0xc9, 0xa6, 0xb0, 0xc7, 0xa6, 0x2c, 0x81, 0x5a, 0x3a, 0x1c, 0x56, 0xb4, 0xec, 0x03, 0xca,
	0x05, 0x8b, 0xc7, 0x32, 0xcd, 0xc3, 0x64, 0x69, 0x19, 0x6a, 0x6e, 0xac, 0xcf, 0x8d, 0x32, 0xb5,
	0x96, 0x9b, 0xb2, 0x51, 0x0b, 0x9a, 0x21, 0xf9, 0x4a, 0xf4, 0x23, 0x3c, 0x20, 0xfd, 0xf0, 0x22,
	0x38, 0x23, 0xb1, 0x32, 0x54, 0xc5, 0x5d, 0x91, 0xf8, 0x09, 0x1e, 0x90, 0x9e, 0x42, 0x9d, 0x5f,
	0x0d, 0xb0, 0xba, 0xbe, 0x7f, 0x92, 0x9c, 0x78, 0x44, 0x7c, 0x19, 0xb1, 0x4b, 0xbe, 0xbc, 0x20,
	0x5c, 0x4c, 0xb5, 0x88, 0x31, 0xd5, 0x22, 0xe8, 0xd1, 0x54, 0x25, 0x4a, 0x37, 0x54, 0xa2, 0x58,
	0x87, 0x6d, 0xa8, 0x60, 0x59, 0x65, 0x65, 0xe8, 0x1b, 0x3d, 0x90, 0x70, 0x9d, 0x4b, 0xb0, 0x3e,
	0x26, 0xe2, 0x5f, 0xa9, 0xbd, 0x07, 0x35, 0xca, 0xfb, 0xec, 0x32, 0xd4, 0xb9, 0xa8, 0xb9, 0x55,
	0xca, 0x8f, 0xe5, 0xa3, 0x9c, 0x67, 0xd8, 0xf3, 0x08, 0xe7, 0x7d, 0xc1, 0xce, 0x49, 0x98, 0xce,
	0xb3, 0x04, 0x3b, 0x95, 0x90, 0xf3, 0x97, 0xa1, 0x6e, 0x2e, 0x16, 0xe8, 0x96, 0x37, 0xdf, 0x87,
	0xfa, 0x6c, 0x21, 0x20, 0xca, 0x8a, 0x80, 0x5e, 0x06, 0x53, 0x11, 0x38, 0xbd, 0x4a, 0x86, 0x69,
	0xc5, 0xad, 0x49, 0xe0, 0x09, 0xbd, 0x92, 0xf3, 0x70, 0xe9, 0x19, 0x1d, 0x09, 0x12, 0xab, 0xde,
	0xae, 0x77, 0x5e, 0x9a, 0x49, 0xd4, 0x47, 0xea, 0xb5, 0xab, 0x69, 0x85, 0x40, 0x2b, 0xff, 0x1c,
	0xe8, 0xd2, 0x4c, 0xa0, 0x0f, 0x1f, 0x40, 0x25, 0x99, 0xc3, 0x75, 0xa8, 0x3e, 0xed, 0x7d, 0xd2,
	0x3b, 0xfe, 0xbc, 0xd7, 0x5c, 0x40, 0x26, 0x54, 0xba, 0x9f, 0x1e, 0x7e, 0xb6, 0xdf, 0x34, 0x50,
	0x0d, 0xca, 0x7b, 0xfb, 0xdd, 0xbd, 0x66, 0xa9, 0xf3, 0x5b, 0x19, 0x40, 0x97, 0xa2, 0x7b, 0x72,
	0x88, 0x7e, 0x34, 0x60, 0x75, 0xc6, 0x4a, 0xe8, 0x8d, 0xa2, 0x1d, 0xae, 0xf3, 0x9a, 0x6d, 0x17,
	0x79, 0xf9, 0x89, 0xee, 0xbc, 0xfb, 0xed, 0xef, 0x7f, 0xfe, 0x5c, 0x7a, 0xc7, 0x79, 0x4b, 0x7d,
	0xbc, 0x25, 0xaf, 0xad, 0x79, 0xbc, 0xfd, 0xf5, 0x24, 0xf3, 0xdf, 0xb4, 0xb5, 0xbf, 0xa4, 0x1b,
	0x77, 0x8d, 0x87, 0xe8, 0x27, 0x03, 0xee, 0x3e, 0x8d, 0xe4, 0x08, 0xfd, 0xef, 0x44, 0xd9, 0x2f,
	0x2a, 0xea, 0x07, 0x03, 0x56, 0x67, 0x3c, 0x3c, 0xad, 0xe8, 0x3a, 0x93, 0xdb, 0xd7, 0x77, 0x97,
	0xb3, 0xad, 0x04, 0x6d, 0xa2, 0x17, 0x11, 0x84, 0xbe, 0x4f, 0xd4, 0x4c, 0x0d, 0x9e, 0x59, 0x35,
	0x73, 0x8d, 0x6f, 0xaf, 0xcd, 0x55, 0xa3, 0x49, 0x4e, 0x5b, 0x09, 0x7a, 0x80, 0xde, 0xbc, 0x49,
	0x90, 0x1e, 0x5b, 0x8f, 0xcd, 0x2f, 0xd2, 0x2f, 0xcc, 0xd9, 0x92, 0xfa, 0x17, 0xb5, 0xfd, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x64, 0xad, 0x4d, 0xc6, 0xd3, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PatientAPIClient is the client API for PatientAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PatientAPIClient interface {
	// Adds patient medical data like blood group, skin color, allergies to the database
	AddPatientMedData(ctx context.Context, in *AddPatientMedDataRequest, opts ...grpc.CallOption) (*HashResponse, error)
	// Updates an existing patient medical data
	UpdatePatientMedData(ctx context.Context, in *AddPatientMedDataRequest, opts ...grpc.CallOption) (*HashResponse, error)
	// Retrieves a single patients medical data
	GetPatientMedData(ctx context.Context, in *GetPatientMedDataRequest, opts ...grpc.CallOption) (*MedicalData, error)
	// Fetches history of patient treatments from ledger
	GetMedicalHistory(ctx context.Context, in *GetMedicalHistoryRequest, opts ...grpc.CallOption) (*MedicalHistory, error)
}

type patientAPIClient struct {
	cc *grpc.ClientConn
}

func NewPatientAPIClient(cc *grpc.ClientConn) PatientAPIClient {
	return &patientAPIClient{cc}
}

func (c *patientAPIClient) AddPatientMedData(ctx context.Context, in *AddPatientMedDataRequest, opts ...grpc.CallOption) (*HashResponse, error) {
	out := new(HashResponse)
	err := c.cc.Invoke(ctx, "/umrs.patient.PatientAPI/AddPatientMedData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientAPIClient) UpdatePatientMedData(ctx context.Context, in *AddPatientMedDataRequest, opts ...grpc.CallOption) (*HashResponse, error) {
	out := new(HashResponse)
	err := c.cc.Invoke(ctx, "/umrs.patient.PatientAPI/UpdatePatientMedData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientAPIClient) GetPatientMedData(ctx context.Context, in *GetPatientMedDataRequest, opts ...grpc.CallOption) (*MedicalData, error) {
	out := new(MedicalData)
	err := c.cc.Invoke(ctx, "/umrs.patient.PatientAPI/GetPatientMedData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientAPIClient) GetMedicalHistory(ctx context.Context, in *GetMedicalHistoryRequest, opts ...grpc.CallOption) (*MedicalHistory, error) {
	out := new(MedicalHistory)
	err := c.cc.Invoke(ctx, "/umrs.patient.PatientAPI/GetMedicalHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientAPIServer is the server API for PatientAPI service.
type PatientAPIServer interface {
	// Adds patient medical data like blood group, skin color, allergies to the database
	AddPatientMedData(context.Context, *AddPatientMedDataRequest) (*HashResponse, error)
	// Updates an existing patient medical data
	UpdatePatientMedData(context.Context, *AddPatientMedDataRequest) (*HashResponse, error)
	// Retrieves a single patients medical data
	GetPatientMedData(context.Context, *GetPatientMedDataRequest) (*MedicalData, error)
	// Fetches history of patient treatments from ledger
	GetMedicalHistory(context.Context, *GetMedicalHistoryRequest) (*MedicalHistory, error)
}

func RegisterPatientAPIServer(s *grpc.Server, srv PatientAPIServer) {
	s.RegisterService(&_PatientAPI_serviceDesc, srv)
}

func _PatientAPI_AddPatientMedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPatientMedDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientAPIServer).AddPatientMedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umrs.patient.PatientAPI/AddPatientMedData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientAPIServer).AddPatientMedData(ctx, req.(*AddPatientMedDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientAPI_UpdatePatientMedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPatientMedDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientAPIServer).UpdatePatientMedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umrs.patient.PatientAPI/UpdatePatientMedData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientAPIServer).UpdatePatientMedData(ctx, req.(*AddPatientMedDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientAPI_GetPatientMedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientMedDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientAPIServer).GetPatientMedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umrs.patient.PatientAPI/GetPatientMedData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientAPIServer).GetPatientMedData(ctx, req.(*GetPatientMedDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientAPI_GetMedicalHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicalHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientAPIServer).GetMedicalHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umrs.patient.PatientAPI/GetMedicalHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientAPIServer).GetMedicalHistory(ctx, req.(*GetMedicalHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PatientAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "umrs.patient.PatientAPI",
	HandlerType: (*PatientAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPatientMedData",
			Handler:    _PatientAPI_AddPatientMedData_Handler,
		},
		{
			MethodName: "UpdatePatientMedData",
			Handler:    _PatientAPI_UpdatePatientMedData_Handler,
		},
		{
			MethodName: "GetPatientMedData",
			Handler:    _PatientAPI_GetPatientMedData_Handler,
		},
		{
			MethodName: "GetMedicalHistory",
			Handler:    _PatientAPI_GetMedicalHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "patient.proto",
}
