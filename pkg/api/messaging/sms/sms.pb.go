// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sms.proto

package sms

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SMS struct {
	DestinationPhones    []string `protobuf:"bytes,2,rep,name=destination_phones,json=destinationPhones,proto3" json:"destination_phones,omitempty"`
	Keyword              string   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SMS) Reset()         { *m = SMS{} }
func (m *SMS) String() string { return proto.CompactTextString(m) }
func (*SMS) ProtoMessage()    {}
func (*SMS) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d8bdc537111860, []int{0}
}

func (m *SMS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SMS.Unmarshal(m, b)
}
func (m *SMS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SMS.Marshal(b, m, deterministic)
}
func (m *SMS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SMS.Merge(m, src)
}
func (m *SMS) XXX_Size() int {
	return xxx_messageInfo_SMS.Size(m)
}
func (m *SMS) XXX_DiscardUnknown() {
	xxx_messageInfo_SMS.DiscardUnknown(m)
}

var xxx_messageInfo_SMS proto.InternalMessageInfo

func (m *SMS) GetDestinationPhones() []string {
	if m != nil {
		return m.DestinationPhones
	}
	return nil
}

func (m *SMS) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *SMS) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*SMS)(nil), "umrs.sms.SMS")
}

func init() { proto.RegisterFile("sms.proto", fileDescriptor_c8d8bdc537111860) }

var fileDescriptor_c8d8bdc537111860 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0xb1, 0x4b, 0x03, 0x31,
	0x14, 0xc6, 0xa9, 0x87, 0xad, 0x17, 0x70, 0x30, 0x83, 0x1c, 0xd1, 0xa1, 0x38, 0x75, 0xf0, 0x12,
	0xd1, 0xcd, 0x4d, 0xc1, 0xc1, 0xe1, 0xa0, 0x34, 0x9b, 0x8b, 0xa4, 0xde, 0x33, 0x3d, 0x34, 0x79,
	0x21, 0x2f, 0xa5, 0xf4, 0xbf, 0x97, 0xcb, 0xdd, 0x81, 0xd0, 0x29, 0x7c, 0xdf, 0xef, 0x23, 0x8f,
	0x1f, 0x2b, 0xc9, 0x91, 0x0c, 0x11, 0x13, 0xf2, 0x8b, 0xbd, 0x8b, 0x24, 0xc9, 0x91, 0xb8, 0xb1,
	0x88, 0xf6, 0x17, 0x54, 0xee, 0xb7, 0xfb, 0x6f, 0x05, 0x2e, 0xa4, 0xe3, 0x30, 0x13, 0xb7, 0x23,
	0x34, 0xa1, 0x53, 0xc6, 0x7b, 0x4c, 0x26, 0x75, 0xe8, 0xc7, 0x4f, 0xc4, 0x7d, 0x7e, 0xbe, 0x6a,
	0x0b, 0xbe, 0xa6, 0x83, 0xb1, 0x16, 0xa2, 0xc2, 0x90, 0x17, 0xa7, 0xeb, 0xbb, 0x1d, 0x2b, 0x74,
	0xa3, 0x79, 0xcd, 0x78, 0x0b, 0x94, 0x3a, 0x9f, 0xe1, 0x67, 0xd8, 0xa1, 0x07, 0xaa, 0xce, 0x96,
	0xc5, 0xaa, 0xdc, 0x5c, 0xfd, 0x23, 0xeb, 0x0c, 0x78, 0xc5, 0x16, 0x3f, 0x70, 0x3c, 0x60, 0x6c,
	0xab, 0xd9, 0x72, 0xb6, 0x2a, 0x37, 0x53, 0xec, 0x89, 0x03, 0x22, 0x63, 0xa1, 0x2a, 0x06, 0x32,
	0xc6, 0xc7, 0x67, 0x36, 0xd7, 0x8d, 0x7e, 0x59, 0xbf, 0xf3, 0x07, 0xb6, 0xd0, 0xe0, 0xdb, 0xfe,
	0xee, 0xa5, 0x9c, 0x94, 0xa5, 0x6e, 0xb4, 0xb8, 0x96, 0x83, 0x9a, 0x9c, 0xbc, 0xe5, 0x5b, 0xef,
	0xfd, 0x7a, 0xfe, 0x51, 0x90, 0xa3, 0xed, 0x3c, 0xd7, 0x4f, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x59, 0x00, 0xd0, 0x8a, 0x33, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SMSAPIClient is the client API for SMSAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SMSAPIClient interface {
	SendSMS(ctx context.Context, in *SMS, opts ...grpc.CallOption) (*empty.Empty, error)
}

type sMSAPIClient struct {
	cc *grpc.ClientConn
}

func NewSMSAPIClient(cc *grpc.ClientConn) SMSAPIClient {
	return &sMSAPIClient{cc}
}

func (c *sMSAPIClient) SendSMS(ctx context.Context, in *SMS, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/umrs.sms.SMSAPI/SendSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SMSAPIServer is the server API for SMSAPI service.
type SMSAPIServer interface {
	SendSMS(context.Context, *SMS) (*empty.Empty, error)
}

func RegisterSMSAPIServer(s *grpc.Server, srv SMSAPIServer) {
	s.RegisterService(&_SMSAPI_serviceDesc, srv)
}

func _SMSAPI_SendSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSAPIServer).SendSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umrs.sms.SMSAPI/SendSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSAPIServer).SendSMS(ctx, req.(*SMS))
	}
	return interceptor(ctx, in, info, handler)
}

var _SMSAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "umrs.sms.SMSAPI",
	HandlerType: (*SMSAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSMS",
			Handler:    _SMSAPI_SendSMS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sms.proto",
}
