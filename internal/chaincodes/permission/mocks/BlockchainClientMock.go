// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ledger "github.com/gidyon/umrs/pkg/api/ledger"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ledgerClientMock is an autogenerated mock type for the ledgerClientMock type
type ledgerClientMock struct {
	mock.Mock
}

// AddBlock provides a mock function with given fields: ctx, in, opts
func (_m *ledgerClientMock) AddBlock(ctx context.Context, in *ledger.AddBlockRequest, opts ...grpc.CallOption) (*ledger.AddBlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ledger.AddBlockResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ledger.AddBlockRequest, ...grpc.CallOption) *ledger.AddBlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ledger.AddBlockResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ledger.AddBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlock provides a mock function with given fields: ctx, in, opts
func (_m *ledgerClientMock) GetBlock(ctx context.Context, in *ledger.GetBlockRequest, opts ...grpc.CallOption) (*ledger.Block, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ledger.Block
	if rf, ok := ret.Get(0).(func(context.Context, *ledger.GetBlockRequest, ...grpc.CallOption) *ledger.Block); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ledger.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ledger.GetBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStat provides a mock function with given fields: ctx, in, opts
func (_m *ledgerClientMock) GetStat(ctx context.Context, in *ledger.GetStatRequest, opts ...grpc.CallOption) (*ledger.GetStatResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ledger.GetStatResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ledger.GetStatRequest, ...grpc.CallOption) *ledger.GetStatResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ledger.GetStatResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ledger.GetStatRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBlocks provides a mock function with given fields: ctx, in, opts
func (_m *ledgerClientMock) ListBlocks(ctx context.Context, in *ledger.ListBlocksRequest, opts ...grpc.CallOption) (*ledger.Blocks, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ledger.Blocks
	if rf, ok := ret.Get(0).(func(context.Context, *ledger.ListBlocksRequest, ...grpc.CallOption) *ledger.Blocks); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ledger.Blocks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ledger.ListBlocksRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterContract provides a mock function with given fields: ctx, in, opts
func (_m *ledgerClientMock) RegisterContract(ctx context.Context, in *ledger.RegisterContractRequest, opts ...grpc.CallOption) (*ledger.RegisterContractResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ledger.RegisterContractResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ledger.RegisterContractRequest, ...grpc.CallOption) *ledger.RegisterContractResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ledger.RegisterContractResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ledger.RegisterContractRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
